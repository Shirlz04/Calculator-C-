Script started on 2022-10-11 14:14:55-04:00 [TERM="xterm" TTY="/dev/pts/27" COLUMNS="100" LINES="35"]
shirlz04@pe15:~/cs410/hw1$ ls -l
total 12
-rw-r--r-- 1 shirlz04 cs410-1G 8205 Oct 11 14:13 hw1.cpp
-rw-r--r-- 1 shirlz04 cs410-1G    0 Oct 11 14:14 typescript
shirlz04@pe15:~/cs410/hw1$ cat hw1.cpp
/* Author: Oshane Shirley 
   Course: CS410 
   Homework 1    */

#include <iostream>
#include <set>
#include <string>
#include <list>
using namespace std;


/*  the input will take each int afterwards and adds it to the set so then everything 
in set is for calculations */


int primeNumber(list<int>, int);
int sumOfFactors(list<int>, int);
int sumOfPrime(int, int);
int greatestCommonDivisor(list<int>, int);
int euclideanAlgorithm(int, int);
int power(int);
void inputHandler(int,int);

// change input so it takes a certain amount of ints
// if the user enters more then either use the first n or alert the user 
// of the error!!!!!!!!!!!!


/* The power function helps converting integers to the correct power of 10
*/
int power(int num) {
	if (num == 0) {
		return 1;
	}
	else {
		return 10 * power(num - 1);
	}
}

/* The inputHandler function is used to convert the string values that are
entered by the user to integers and then calls the appropriate function.
The space in the input will serve as the delimiter to seperate integers 
and then based on the counter for the amount of integer multiply by the
power of 10 to find the correct numerical value. */
void inputHandler(int value, int numberOfIntegers) {
	
	string decider = "0";
	getline(cin, decider);
	//cout << decider << endl;
	int size = decider.length();
	//cout << size << endl;
	char holder[80];
	char holder2[80];
	string newInt = "";
	set<int> input;
	list<int> input2;
	int count = 0;
	int integerValue = 0;
	int checker = false;
	decider.copy(holder, size, 0);
	/*if (value == 1) {
		cout << " Enter the amount of numbers: " << endl;
	}*/
	holder[size] = ' '; // set the next value to a space so the loop stops 
	for (int i = 0; i <= size ; i++) {
		//string newInt = "";
		if (holder[i] != ' ') {
			holder2[count] = holder[i];
			count++;
			//cout << holder[i] << endl;
		}
		else {
			for (int j = 0; j < count; j++) {
				//cout << holder2[j] << endl;
				/*(int)cast to ascii int value subtract 48
				after getting each numerical value add them to get the total
				value*/
				integerValue += (((int)holder2[j] - 48) * power(count - 1 - j));
			}
			//cout << integerValue << endl;
			input2.push_back(integerValue);
			/*if (!checker) {
				checker = true;
				numberofIntegers = integerValue;
			}*/
			/*if (value == 4) {
				input2.push_back(integerValue);
			}
			else {
				input.insert(integerValue);
			}*/
			char holder2[80];
			integerValue = 0;
			count = 0;

		}
	}
	//cout << primeNumber(input) << endl;
	//input.clear();
	if (value == 1) {
		
		cout << "There are " << primeNumber(input2, numberOfIntegers);
		cout << " prime factors." << endl << endl;
	}
	else if (value == 2) {
		cout << "The total factors is ";
		cout << sumOfFactors(input2, numberOfIntegers) << endl;
	}
	else if (value == 3) {
		int min =0, counter = 0;
		int max = 99;
		for (auto & temp : input2) {
			counter++;
			if (counter == 1) {
				min = temp;

			}
			else {
				max = temp;
			}
		}
		cout << "The total factors is ";
		cout << sumOfPrime(min, max) << endl << endl;
	}
	else if (value == 4) {
		cout << "The sum of the greatest common divisors is ";
		cout << greatestCommonDivisor(input2, numberOfIntegers) << endl << endl;
	}
	
}

/* In order for a number to be a factor it has to be less than or equal to
half of the number that is being evaluated. If there is an even number  that
is not the number 2 then there is no need to check the number.*/
int primeNumber(list<int> num , int numberOfInput) {
	//num.pop_front();
	int count = num.size();
	if (count != numberOfInput) {
		cout << "Number of integers mismatch!" << endl;
		return 0;
	}
	else {

		for (auto& num1 : num) {
			//cout << num1 << endl;
			// check to see if the int is an even number first and if not then else case
			if (num1 == 2) {
				count++;
			}
			if (num1 % 2 == 0 || num1 == 1) {
				//cout << num1 << endl;
				count--;
				continue;
			}
			else {
				for (int i = 1; i <= (num1 / 2); i += 2) {
					if (num1 % i == 0 && i != 1 && i != num1) {
						//cout << num1<< endl;
						count--;
						break;
					}
				}
			}
		}
	}
	return count;
}

int sumOfFactors(list<int> num, int numberOfInput) {
	int count = 0;
	int counter = num.size();
	if (counter != numberOfInput) {
		cout << "Number of integers mismatch!" << endl;
		return 0;
	}
	else {
		for (auto& num1 : num) {
			for (int i = 1; i <= (num1 / 2); i++) {
				if (num1 % i == 0) {
					count++;
				}
			}
			count++;
		}
	}
	return count;
}

/* Since all even numbers after the number 2 are not prime numbers then
only the odd numbers should be checked after the number 2 */
int sumOfPrime(int min, int max) {
	int sum = 0;
	bool checker = false;
	for (int i = min; i <= max; i++) {
		if (i % 2 == 0 && i != 2) {
			continue;
		}
		else {
			for (int j = 1; j <= (i / 2); j += 2) {
				if (i % j == 0 && j != 1 && j != i) {
					//cout << num1<< endl;
					checker = true;
					break;
				}
			}
			if (!checker) {
				sum += i;
				checker = false;
			}
		}
	}

	return sum;
}

// sets organizes the integers and that is not needed here

//Euclidean Algorithm for GCD
int greatestCommonDivisor(list<int> num, int numberOfPairs) {
	int sum = 0;
	int holder1, holder2;
	int count = 0;
	int counter = num.size();
	if (counter != numberOfPairs) {
		cout << "Number of integers mismatch!" << endl;
		return 0;
	}
	else {
		for (auto& num1 : num) {
			count++;
			//cout << num1 << endl;
			if (count == 1) {
				holder1 = num1;
			}
			else if (count == 2) {
				holder2 = num1;
				if (holder1 > holder2) {

					sum += euclideanAlgorithm(holder1, holder2);
				}
				else {

					sum += euclideanAlgorithm(holder2, holder1);
				}
				count = 0;
			}

		}
	}

	return sum;
}

int euclideanAlgorithm(int num1, int num2) {
	int rem = num1 % num2;
	if (rem == 0) {
		//cout << num2 << endl;
		return num2;
	}
	else
	{
		return euclideanAlgorithm(num2, rem);
	}
	
}


// Main function needs to be setup for user input and error cases
// Throw in exception handling as well for wrong data type

int main() {
	
	string choice = "0";

	/*set<int> test = {5,7,9};
	set<int> test2 = { 6,8,5 };
	list<int> test3 = {14, 18, 20, 30, 25, 35};
	cout << primeNumber(test) << endl;
	cout << sumOfFactors(test2) << endl;
	cout << sumOfPrime(2, 10) << endl;
	cout << greatestCommonDivisor(test3) << endl;
	*/
	string decider = "0";
	int newChoice = 0;
	//inputHandler(newChoice);
	while (newChoice != 5) {
		cout << "	Math Options" << endl;
		cout << "---------------------------" << endl;
		cout << "1. Find Prime Number" << endl;
		cout << "2. Sum of Factors" << endl;
		cout << "3. Calculate the Sum of Prime Numbers" << endl;
		cout << "4. Find Greatest Common Divisor" << endl;
		cout << "5. Quit" << endl << endl;
		cout << "Please enter your selection: ";
		char choiceHelper[2];
		getline(cin, choice);
		choice.copy(choiceHelper, 1, 0);
		newChoice = (int)choiceHelper[0] - 48;
		
		//cin >> newChoice;
		int numberOfIntegers = 0;
		if (newChoice == 1 || newChoice == 2) {
			int test;
			cout << "How many integers do you wish to scan: ";
			//cin >> numberOfIntegers;
			getline(cin, choice);
			choice.copy(choiceHelper, 1, 0);
			numberOfIntegers = (int)choiceHelper[0] - 48;
			cout << "Enter the integers: ";
			inputHandler(newChoice, numberOfIntegers);
			//cin >> test;
		}
		else if (newChoice == 3) {
			cout << "Enter two integers as a range: ";
			inputHandler(newChoice, numberOfIntegers);
		}
		else if (newChoice == 4) {
			cout << "How many pairs do you need to scan: ";
			getline(cin, choice);
			choice.copy(choiceHelper, 1, 0);
			numberOfIntegers = ((int)choiceHelper[0] - 48) * 2;
			cout << "Enter the pairs: ";
			inputHandler(newChoice, numberOfIntegers);
		}
		else if (newChoice == 5) {
			cout << "Good Bye!" << endl;
		}
		else {
			cout << "Inorrect input " << endl << endl;
			//return;
		}
		
		
		
	}
	return 0;
}shirlz04@pe15:~/cs410/hw1$ g++ -o hw1 hw1.cpp
shirlz04@pe15:~/cs410/hw1$ ./hw1
	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 1
How many integers do you wish to scan: 3
Enter the integers: 5 7 9
There are 2 prime factors.

	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 2
How many integers do you wish to scan: 3
Enter the integers: 6 8 5
The total factors is 10
	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 3
Enter two integers as a range: 2 10
The total factors is 17

	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 4
How many pairs do you need to scan: 3
Enter the pairs: 14 18 20 30 25 35
The sum of the greatest common divisors is 17

	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 6
Inorrect input 

	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 9
Inorrect input 

	Math Options
---------------------------
1. Find Prime Number
2. Sum of Factors
3. Calculate the Sum of Prime Numbers
4. Find Greatest Common Divisor
5. Quit

Please enter your selection: 5
Good Bye!
shirlz04@pe15:~/cs410/hw1$ exit
exit

Script done on 2022-10-11 14:17:26-04:00 [COMMAND_EXIT_CODE="0"]
